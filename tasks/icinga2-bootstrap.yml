---
# When a --limit is in place only the facts of
# the selected hosts are retrieved and we need
# the facts of the other nodes as they are
# used as defaults of variables used in the
# templates
- name: Gather Facts of the other Icinga nodes
  setup:
  run_once: True
  delegate_facts: True
  delegate_to: "{{ item }}"
  loop: >-
    {{ groups[i2_master_group]|default([])
    + groups[i2_satellite_group]|default([])
    + groups[i2_agent_group]|default([]) }}
  when: hostvars[item].ansible_fqdn is not defined

 # Copying role-vars to host-vars
 # We do this in a loop over all the nodes as we
 # need the variables of other nodes in the templates
 # which we don't get if a --limit is in place
- name: Set default hostvars for Icinga masters
  set_fact:
    i2_master: >-
      {{ hostvars[item].i2_master|default(True) }}
    i2_satellite: >-
      {{ hostvars[item].i2_satellite|default(False) }}
  run_once: True
  delegate_facts: True
  delegate_to: "{{ item }}"
  loop: "{{ groups[i2_master_group]|default([]) }}"

- name: Set default hostvars for Icinga satellites
  set_fact:
    i2_master: >-
      {{ hostvars[item].i2_master|default(False) }}
    i2_satellite: >-
      {{ hostvars[item].i2_satellite|default(True) }}
    i2_zone: >-
      {{ hostvars[item].i2_zone|default('master') }}
  run_once: True
  delegate_facts: True
  delegate_to: "{{ item }}"
  loop: "{{ groups[i2_satellite_group]|default([]) }}"

- name: Set default hostvars for all Icinga nodes
  set_fact:
    i2_api_port: >-
      {{ hostvars[item].i2_api_port|default(i2_api_port) }}
    i2_api_host: >-
      {{ hostvars[item].i2_api_host|default(hostvars[item].ansible_facts.default_ipv4.address) }}
    i2_hostname: >-
      {{ hostvars[item].i2_hostname|default(hostvars[item].ansible_fqdn) }}
    i2_zonename: >-
      {{ hostvars[item].i2_zonename|default(hostvars[item].ansible_fqdn) }}
    i2_templates: >-
      {{ hostvars[item].i2_templates|default(i2_templates) }}
    i2_objects: >-
      {{ hostvars[item].i2_objects|default(i2_objects) }}
    i2_apply_rules: >-
      {{ hostvars[item].i2_apply_rules|default(i2_apply_rules) }}
  run_once: True
  delegate_facts: True
  delegate_to: "{{ item }}"
  loop: >-
    {{ groups[i2_master_group]|default([])
    + groups[i2_satellite_group]|default([])
    + groups[i2_agent_group]|default([]) }}

- name: Determine parent, peer and child nodes
  set_fact:
    i2_child_nodes: >-
      {{ hostvars | dict2items
      | json_query("[?value.i2_zone==" + "'" + i2_zonename + "'].key")
      | sort }}
    i2_child_zonenames: >-
      {{ hostvars | dict2items
      | json_query("[?value.i2_zone==" + "'" + i2_zonename + "'].value.i2_zonename")
      | sort
      | unique }}
    i2_parent_nodes: >-
      {%- if i2_zone is defined -%}
      {{ hostvars | dict2items
      | json_query("[?value.i2_zonename==" + "'" + i2_zone + "'].key") | list
      }}
      {%- else %}[]{% endif -%}
    i2_peer_nodes: >-
      {{ hostvars | dict2items
      | json_query("[?value.i2_zonename==" + "'" + i2_zonename + "'].key")
      | sort }}

- name: Check if Client Certificates exist
  become: yes
  stat:
    path: "{{ i2_pki_file }}"
  register: client_certificate

- name: Check if Client Certificate is signed by our CA
  become: yes
  shell: >-
    openssl x509 -in {{ i2_pki_file }} -noout -text | grep Issuer
  register: certificate_authority
  ignore_errors: yes
  when: not i2_master and client_certificate.stat.exists

- name: Set certificate authority fact
  set_fact:
    i2_certificate_signed_by_ca: yes
  when:
    - certificate_authority.changed
    - "'Icinga CA' in certificate_authority.stdout"

- name: Icingaweb2 (Redhat) - Check if SELinux is enabled
  command: /usr/sbin/getenforce
  register: selinux
  when: ansible_os_family == 'RedHat'
